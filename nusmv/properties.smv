

--safety, signals should ever have another state then green or red
CTLSPEC AG (S1A_red | S1A_green)
CTLSPEC AG (S2A_red | S2A_green)
CTLSPEC AG (S3A_red | S3A_green)
CTLSPEC AG (S4A_red | S4A_green)

CTLSPEC AG (S1B_red | S1B_green)
CTLSPEC AG (S2B_red | S2B_green)
CTLSPEC AG (S3B_red | S3B_green)
CTLSPEC AG (S4B_red | S4B_green)


--safety, signal should always be green when the train can safely move to the next section
--defined as signal green implies that the train can safely move to the next track (this does not yet specify
--that the signal has to be green when the track is available. for this we need the next spec also)

--for signals with interlocks
LTLSPEC G (S2A_green -> ((P1A_locked_curved & P2B_locked_curved & !T3B_occupied & !T2A_occupied & !T4B_occupied) | (P1A_locked_straight & !T2A_occupied & !T3A_occupied)))
LTLSPEC G (S4B_green -> ((P1A_locked_curved & P2B_locked_curved & !T1A_occupied & !T4B_occupied & !T2A_occupied) | (P2B_locked_straight & !T4B_occupied)))
LTLSPEC G (S4A_green -> ((P2A_locked_curved & P1B_locked_curved & !T1B_occupied & !T4A_occupied & !T2B_occupied) | (P2A_locked_straight & !T4A_occupied)))
LTLSPEC G (S2B_green -> ((P2A_locked_curved & P1B_locked_curved & !T3A_occupied & !T2B_occupied & !T4A_occupied) | (P1B_locked_straight & !T2B_occupied & !T3B_occupied)))

--for signal without interlocks, with internal tracks
LTLSPEC G (S3B_green -> (P1B_locked_straight & !T2B_occupied & !T1B_occupied))
LTLSPEC G (S3A_green -> (P1A_locked_straight & !T2A_occupied & !T1A_occupied))


--safety, signal should always be green when the train can safely move to the next section
--define as, signal red implies that the train cannot safely mvoe to the next track. (together with the previous 
--property, this ensures that the signal cannot be red when the next track is available, and it cannot be green
--when the next track is not available. Since signal are always red or green, this checks the proper
--behaviour.)

--for signals with interlocks
LTLSPEC G (S2A_red -> (!P1A_locked_straight | !(P1A_locked_curved & P2B_locked_curved)) | (P1A_locked_straight & T3A_occupied) | (P1A_locked_curved & P2B_locked_curved & (T4B_occupied | T2A_occupied | T3B_occupied)))
LTLSPEC G (S4B_red -> (!P2B_locked_straight | !(P1A_locked_curved & P2B_locked_curved)) | (P2B_locked_straight & T4B_occupied) | (P1A_locked_curved & P2B_locked_curved & (T4B_occupied | T2A_occupied | T1A_occupied)))
LTLSPEC G (S4A_red -> (!P2A_locked_straight | !(P1B_locked_curved & P2A_locked_curved)) | (P2A_locked_straight & T4A_occupied) | (P1A_locked_curved & P2A_locked_curved & (T4A_occupied | T2B_occupied | T1B_occupied)))
LTLSPEC G (S2B_red -> (!P1B_locked_straight | !(P1B_locked_curved & P2A_locked_curved)) | (P1B_locked_straight & T3B_occupied) | (P1A_locked_curved & P2A_locked_curved & (T4A_occupied | T2B_occupied | T3A_occupied)))



--for signal without interlocks, with internal tracks
--LTLSPEC G (S3B_red -> !P1B_locked_straight | T2B_occupied | T1B_occupied)
--LTLSPEC G (S3A_red -> !P1A_locked_straight | T2A_occupied | T1A_occupied)
LTLSPEC G (S3B_red -> !P1A_locked_straight | !P2A_locked_straight | !P1B_locked_straight | !P2B_locked_straight | T2B_occupied | T1B_occupied)
LTLSPEC G (S3A_red -> !P1A_locked_straight | !P2A_locked_straight | !P1B_locked_straight | !P2B_locked_straight | T2A_occupied | T1A_occupied)

--safety, system should never issue conflicting commands, a.k.a only goal_straight or goal_curved should be set at any given time

--P1A
LTLSPEC G (P1A_goal_straight -> !P1A_goal_curved)
LTLSPEC G (P1A_goal_curved -> !P1A_goal_straight)
--P2B
LTLSPEC G (P2B_goal_straight -> !P2B_goal_curved)
LTLSPEC G (P2B_goal_curved -> !P2B_goal_straight)
--P1B
LTLSPEC G (P1B_goal_straight -> !P1B_goal_curved)
LTLSPEC G (P1B_goal_curved -> !P1B_goal_straight)
--P2A
LTLSPEC G (P2A_goal_straight -> !P2A_goal_curved)
LTLSPEC G (P2A_goal_curved -> !P2A_goal_straight)


--liveness, system should always eventually execute given commands, meaning, system will remain in a goal state, until
--the goal is reached, and will eventually actually reach the goal (note, this does not allow the system
--to change the given command until te command has actually been executed)
--P1A
LTLSPEC G ((P1A_goal_straight -> (P1A_goal_straight U P1A_locked_straight )) & (P1A_goal_straight -> F (!P1A_goal_straight & P1A_locked_straight)))
LTLSPEC G ((P1A_goal_curved -> (P1A_goal_curved U P1A_locked_curved )) & (P1A_goal_curved -> F (!P1A_goal_curved & P1A_locked_curved)))
--P2B
LTLSPEC G ((P2B_goal_straight -> (P2B_goal_straight U P2B_locked_straight )) & (P2B_goal_straight -> F (!P2B_goal_straight & P2B_locked_straight)))
LTLSPEC G ((P2B_goal_curved -> (P2B_goal_curved U P2B_locked_curved )) & (P2B_goal_curved -> F (!P2B_goal_curved & P2B_locked_curved)))
--P2A
LTLSPEC G ((P2A_goal_straight -> (P2A_goal_straight U P2A_locked_straight )) & (P2A_goal_straight -> F (!P2A_goal_straight & P2A_locked_straight)))
LTLSPEC G ((P2A_goal_curved -> (P2A_goal_curved U P2A_locked_curved )) & (P2A_goal_curved -> F (!P2A_goal_curved & P2A_locked_curved)))
--P1B
LTLSPEC G ((P1B_goal_straight -> (P1B_goal_straight U P1B_locked_straight )) & (P1B_goal_straight -> F (!P1B_goal_straight & P1B_locked_straight)))
LTLSPEC G ((P1B_goal_curved -> (P1B_goal_curved U P1B_locked_curved )) & (P1B_goal_curved -> F (!P1B_goal_curved & P1B_locked_curved)))


---- ===============================================
---- USE CASES
---- ===============================================

--other (no safety/liveness). From any state of the system, there should be at least one path
--that leads to T3A being occupied, same for T3B
CTLSPEC EF T3A_occupied
CTLSPEC EF T3B_occupied

--safety, a train should stay on its track if both the lights are red (trains do not dissappear)
LTLSPEC G ((T1A_occupied & S2A_red & S1A_red) -> X T1A_occupied)
LTLSPEC G ((T3A_occupied & S3A_red & S4A_red) -> X T3A_occupied) 
LTLSPEC G ((T3B_occupied & S4B_red & S3B_red) -> X T3B_occupied)
LTLSPEC G ((T1B_occupied & S2B_red & S1B_red) -> X T1B_occupied)

----other (no safety/liveness). From any state of the system, there shoudl be at least one path
----in which trains pass each other in the middle (T3A and T3B are occupied at the same time)
CTLSPEC EF (T3A_occupied & T3B_occupied)

--liveness. A train should always move at some point in time. Defined as, if a track is occupied, 
--there should be a state in the future where the track is no longer occupied
LTLSPEC G (T2A_occupied -> F !T2A_occupied)
LTLSPEC G (T3A_occupied -> F !T3A_occupied)
LTLSPEC G (T4A_occupied -> F !T4A_occupied)
LTLSPEC G (T2B_occupied -> F !T2B_occupied)
LTLSPEC G (T3B_occupied -> F !T3B_occupied)
LTLSPEC G (T4B_occupied -> F !T4B_occupied)
--for the entry tracks T1A and T1B this property has to be slightly modified, since we cannot stop
--trains from entering the system, and a avlid situation exists where train keep arriving from 1 direction
--in such a way that when 1 train leaves, the other immediately follows. This would mean the track 1A is always
--occupied, and the trains are always moving. This is a valid use case
LTLSPEC G (T1B_occupied -> (F !T1B_occupied) | (G !T3A_occupied) )
LTLSPEC G (T1A_occupied -> (F !T1A_occupied) | (G !T3B_occupied) ) 


--safety, a train should never give a command to move a lock, when the lock is occupied
LTLSPEC G ((P1A_goal_straight | P1A_goal_curved | P2B_goal_straight | P2B_goal_curved) -> (!T4B_occupied & !T2A_occupied))
LTLSPEC G ((P1B_goal_straight | P1B_goal_curved | P2A_goal_straight | P2A_goal_curved) -> (!T4A_occupied & !T2B_occupied))

--liveness. Interlocks should be used by the system, otherwise they could be left out
--CTLSPEC AG AF (P1A_locked_straight) 
--CTLSPEC AG AF (P1A_locked_curved) 
--CTLSPEC AG AF (P1B_locked_straight) 
--CTLSPEC AG AF (P1B_locked_curved) 
--CTLSPEC AG AF (P2A_locked_straight) 
--CTLSPEC AG AF (P2A_locked_curved) 
--CTLSPEC AG AF (P2B_locked_straight) 
--CTLSPEC AG AF (P2B_locked_curved) 

