/*
 * Test data strategy for Game.
 *
 * Generated by JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178), 2014-10-28 13:23 +0100.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */

import java.util.LinkedList;
import java.util.List;
import java.lang.System;

import org.jmlspecs.jmlunitng.iterator.InstantiationIterator;
import org.jmlspecs.jmlunitng.iterator.IteratorAdapter;
import org.jmlspecs.jmlunitng.iterator.NonNullMultiIterator;
import org.jmlspecs.jmlunitng.iterator.ObjectArrayIterator;
import org.jmlspecs.jmlunitng.iterator.RepeatedAccessIterator;
import org.jmlspecs.jmlunitng.strategy.ObjectStrategy;


/**
 * Test data strategy for Game. Provides
 * instances of Game for testing, using
 * parameters from constructor tests.
 * 
 * @author JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178)
 * @version 2014-10-28 13:23 +0100
 */
public /*@ nullable_by_default */ class Game_InstanceStrategy extends ObjectStrategy {
  

public void setSurroundCrate (Board b, boolean state)  {
  
    b.items[3][3].crate = state;
    b.items[3][4].crate = state;
    b.items[3][5].crate = state;
    b.items[5][3].crate = state;
    b.items[5][4].crate = state;
    b.items[5][5].crate = state;
    b.items[4][3].crate = state;
    b.items[4][5].crate = state;
    
  }
  
public void setSurroundGround (Board b, boolean state)  {
  
    b.items[3][3].ground = state;
    b.items[3][4].ground = state;
    b.items[3][5].ground = state;
    b.items[5][3].ground = state;
    b.items[5][4].ground = state;
    b.items[5][5].ground = state;
    b.items[4][3].ground = state;
    b.items[4][5].ground = state;

  }
  
  
public void setEdgeGround (Board b, boolean state)  {
  
    b.items[2][2].ground = state;
    b.items[2][3].ground = state;
    b.items[2][4].ground = state;
    b.items[2][5].ground = state;
    b.items[2][6].ground = state;
    
    b.items[6][2].ground = state;
    b.items[6][3].ground = state;
    b.items[6][4].ground = state;
    b.items[6][5].ground = state;
    b.items[6][6].ground = state;
    
    b.items[3][2].ground = state;
    b.items[4][2].ground = state;
    b.items[5][2].ground = state;
    
    b.items[3][6].ground = state;
    b.items[4][6].ground = state;
    b.items[5][6].ground = state;


  }
  
public void setEdgeCrate (Board b, boolean state)  {
  
    b.items[2][2].crate = state;
    b.items[2][3].crate = state;
    b.items[2][4].crate = state;
    b.items[2][5].crate = state;
    b.items[2][6].crate = state;

    b.items[6][2].crate = state;
    b.items[6][3].crate = state;
    b.items[6][4].crate = state;
    b.items[6][5].crate = state;
    b.items[6][6].crate = state;

    b.items[3][2].crate = state;
    b.items[4][2].crate = state;
    b.items[5][2].crate = state;

    b.items[3][6].crate = state;
    b.items[4][6].crate = state;
    b.items[5][6].crate = state;

  }

  
    
// case 0 : player in middle on open ground, surrounded by open fields  
// case 1 : player in middle on open ground, bij wall  
// case 2 : player in middle on open ground, surrounded open crates
// case 3 : player in middle on open ground, surrounded by crates surrounded by walls
// case 4 : player in middle on open ground, surrounded by crates surrounded by crates

public Game genGame ( int genCase ) {
    
    Player p = new Player (new Position (4, 4));
    Board b = new Board (9, 9);
       
    for (int x = 1; x < 8; x++) {
    	for (int y=1; y<8; y++) {
    		b.items[x][y].ground = true;
    	}
    }   
       
  
    
// case 0 : player in middle on open ground, surrounded by open fields  
// case 1 : player in middle on open ground, bij wall  
// case 2 : player in middle on open ground, surrounded open crates
// case 3 : player in middle on open ground, surrounded by crates surrounded by walls
// case 4 : player in middle on open ground, surrounded by crates surrounded by crates
    
    switch (genCase) {
      
      case 0 :
          setSurroundCrate (b,false);
          setSurroundGround (b,true);
          setEdgeGround (b,true);
          setEdgeCrate (b,false);
        break;
        
      case 1 :
          setSurroundCrate (b,false);
          setSurroundGround (b,false);
          setEdgeGround (b,false);
          setEdgeCrate (b,false);
        break;        
      
      case 2 :
          setSurroundCrate (b,true);
          setSurroundGround (b,true);
          setEdgeGround (b,true);
          setEdgeCrate (b,false);
        break;        
      
      case 3 :
          setSurroundCrate (b,true);
          setSurroundGround (b,true);
          setEdgeGround (b,false);
          setEdgeCrate (b,false);
        break;        
      
      case 4 :
          setSurroundCrate (b,true);
          setSurroundGround (b,true);
          setEdgeGround (b,true);
          setEdgeCrate (b,true);
        break;    
        
      default:
        break;

    }
    
    System.out.println ("case " + genCase + " : (" + (b.items[5][4].ground) + "," + (b.items[5][4].crate) + ")");
    return (new Game (b, p));

  }
  
  
  /**
   * @return local-scope instances of Game.
   */
  public RepeatedAccessIterator<?> localValues() {
    return new ObjectArrayIterator<Object>
    (new Object[]
     { genGame(1), genGame(2), genGame(3), genGame(4) });
  }


  /**
   * @return default instances of Game, generated
   *  using constructor test parameters.
   */ 
  public RepeatedAccessIterator<Game> defaultValues() {
    final List<RepeatedAccessIterator<Game>> iters = 
      new LinkedList<RepeatedAccessIterator<Game>>();

    // an instantiation iterator for the default constructor
    // (if there isn't one, it will fail silently)
    iters.add(new InstantiationIterator<Game>
      (Game.class, 
       new Class<?>[0], 
       new ObjectArrayIterator<Object[]>(new Object[][]{{}})));

    // parameters for method Game(Board, Player)
    iters.add(new InstantiationIterator<Game>
      (Game.class, 
       new Class<?>[]
       {Board.class, 
        Player.class},
       Game_JML_Test.p_Game__Board_board__Player_player__0().wrapped()));

    return new NonNullMultiIterator<Game>(iters);
  }

  /**
   * Constructor. The boolean parameter to <code>setReflective</code>
   * determines whether or not reflection will be used to generate
   * test objects, and the int parameter to <code>setMaxRecursionDepth</code>
   * determines how many levels reflective generation of self-referential classes
   * will recurse.
   *
   * @see ObjectStrategy#setReflective(boolean)
   * @see ObjectStrategy#setMaxRecursionDepth(int)
   */
  public Game_InstanceStrategy() {
    super(Game.class);
    setReflective(true);
    // uncomment to control the maximum reflective instantiation
    // recursion depth, 0 by default
    // setMaxRecursionDepth(0);
  }
}
